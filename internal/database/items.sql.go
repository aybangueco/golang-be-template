// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: items.sql

package database

import (
	"context"
)

const createItem = `-- name: CreateItem :one
INSERT INTO items (
  name, capacity
) VALUES (
  $1, $2
) RETURNING id, name, capacity
`

type CreateItemParams struct {
	Name     string `json:"name"`
	Capacity int32  `json:"capacity"`
}

func (q *Queries) CreateItem(ctx context.Context, arg CreateItemParams) (Item, error) {
	row := q.db.QueryRow(ctx, createItem, arg.Name, arg.Capacity)
	var i Item
	err := row.Scan(&i.ID, &i.Name, &i.Capacity)
	return i, err
}

const deleteItem = `-- name: DeleteItem :exec
DELETE FROM items
WHERE id = $1
`

func (q *Queries) DeleteItem(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteItem, id)
	return err
}

const getItems = `-- name: GetItems :many
SELECT id, name, capacity FROM items
`

func (q *Queries) GetItems(ctx context.Context) ([]Item, error) {
	rows, err := q.db.Query(ctx, getItems)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Item
	for rows.Next() {
		var i Item
		if err := rows.Scan(&i.ID, &i.Name, &i.Capacity); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateItem = `-- name: UpdateItem :one
UPDATE items
SET name = $1, capacity = $2
WHERE id = $3
RETURNING id, name, capacity
`

type UpdateItemParams struct {
	Name     string `json:"name"`
	Capacity int32  `json:"capacity"`
	ID       int64  `json:"id"`
}

func (q *Queries) UpdateItem(ctx context.Context, arg UpdateItemParams) (Item, error) {
	row := q.db.QueryRow(ctx, updateItem, arg.Name, arg.Capacity, arg.ID)
	var i Item
	err := row.Scan(&i.ID, &i.Name, &i.Capacity)
	return i, err
}
